'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SimpleImgContext = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _observerStart = require('./logic/observerStart');

var _observerStart2 = _interopRequireDefault(_observerStart);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// $FlowIgnoreLine:
var SimpleImgContext = exports.SimpleImgContext = _react2.default.createContext({
  animationStates: {},
  register: undefined
});

var SimpleImgProvider = function (_React$Component) {
  _inherits(SimpleImgProvider, _React$Component);

  function SimpleImgProvider() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, SimpleImgProvider);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SimpleImgProvider.__proto__ || Object.getPrototypeOf(SimpleImgProvider)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      mountedImages: new Set(),
      isContextDocumentLoad: false
    }, _this.appendImageRef = function (image) {
      return _this.observer && _this.observer.observe && _this.observer.observe(image);
    }, _this.removeImageRef = function (image) {
      // $FlowIgnoreLine:
      _this.observer.unobserve(image);
      _this.setState(function (_ref2) {
        var mountedImages = _ref2.mountedImages;

        mountedImages.delete(image);
        return {
          mountedImages: mountedImages
        };
      });
    }, _this.appendImgLoadingRef = function (image) {
      _this.imageLoadRefs.add(image);
    }, _this.removeImgLoadingRef = function (image) {
      _this.imageLoadRefs.delete(image);
    }, _this.observer = {}, _this.imageLoadRefs = new Set(), _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(SimpleImgProvider, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var config = this.props.config;


      if (document.readyState === 'complete') {
        this.observer = _observerStart2.default.call(this, config);
      } else {
        window.addEventListener('load', function () {
          _this2.observer = _observerStart2.default.call(_this2, config);
          _this2.setState({
            isContextDocumentLoad: true
          });
        });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.imageLoadRefs.forEach(function (image) {
        // cancel all loading images;
        image.src = ''; // eslint-disable-line no-param-reassign
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        SimpleImgContext.Provider,
        {
          value: _extends(_extends({}, this.state, {
            useContext: true,
            appendImageRef: this.appendImageRef,
            removeImageRef: this.removeImageRef,
            appendImgLoadingRef: this.appendImgLoadingRef,
            removeImgLoadingRef: this.removeImgLoadingRef
          }))
        },
        this.props.children
      );
    }
  }]);

  return SimpleImgProvider;
}(_react2.default.Component);

SimpleImgProvider.displayName = 'SimpleImgProvider';
SimpleImgProvider.defaultProps = {
  config: _observerStart.defaultConfig
};
exports.default = SimpleImgProvider;