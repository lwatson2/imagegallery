'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.applyImage = applyImage;
exports.default = imageLoader;

var _filterSrcset = require('../logic/filterSrcset');

var _filterSrcset2 = _interopRequireDefault(_filterSrcset);

var _fetchImage = require('./fetchImage');

var _fetchImage2 = _interopRequireDefault(_fetchImage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function applyImage(target, image, src) {
  if (this) {
    this.setState(function (previousState) {
      return {
        mountedImages: new Set(previousState.mountedImages.add(target))
      };
    });
    this.removeImgLoadingRef(image);
  } else {
    if (!target) return;

    /* eslint-disable */
    target.src = src;
    if (target.dataset.srcset) {
      target.srcset = target.dataset.srcset;
    }
    target.style.visibility = 'visible';
    /* eslint-enable */
    var nextSiblingElm = target.nextSibling;
    nextSiblingElm.setAttribute('style', 'opacity: 0; transition: 0.3s all; ' + nextSiblingElm.getAttribute('style'));
    window.__REACT_SIMPLE_IMG__.imgLoadingRefs.delete(target);
  }
}

function logError(message, target) {
  var e = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

  console.error('\uD83D\uDCA9 ' + message + '\n\n' + target.outerHTML + '\n\nand error message ' + JSON.stringify(e, null, 2));
}

function imageLoader(target) {
  var _this = this;

  try {
    var image = new Image(); // eslint-disable-line no-undef

    if (this) {
      this.observer.unobserve(target);
      this.appendImgLoadingRef(image);
    } else {
      var _window$__REACT_SIMPL = window.__REACT_SIMPLE_IMG__,
          observer = _window$__REACT_SIMPL.observer,
          imgLoadingRefs = _window$__REACT_SIMPL.imgLoadingRefs;


      observer.unobserve(target);
      imgLoadingRefs.set(target, image);
    }

    var src = (0, _filterSrcset2.default)(target);

    if (!src) {
      logError('Filter Image source returned empty image source', target);
      return;
    }

    (0, _fetchImage2.default)(image, src).then(function () {
      applyImage.apply(_this, [target, image, src]);
    }).catch(function (e) {
      logError('Fetch image failed with target', target, e);
    });
  } catch (e) {
    logError('Image loader failed with target', target, e);
  }
}